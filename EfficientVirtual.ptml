<!DOCTYPE html>
<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
             Techniques for Efficient Virtualization
        </title>
    </head>

    <body>
        <h1>
             Techniques for Efficient Virtualization
        </h1>

            <div style="text-align:center">
                <p>
                <img
                src="graphics/07-03.jpg"
                height="210" width="400">
                </p>
            </div>

            <p>
            <br />
            Scenario: a type 1 hypervisor is running a guest OS that thinks it
            is the kernel, but really is in user mode.
            The guest runs in <b>virtual kernel mode</b>. Its
            apps think they are in user mode (and really are).
            <br />
            <br />
            What happens when the guest executes a privileged instruction?
            Normally, this would cause the program to crash. But with VT, the
            instruction traps to the hypervisor, and the hypervisor determines
            if the guest OS (or at least its kernel) 
            called it -- OK! -- or a guest application did -- not OK!
            </p>

            <details>
                <summary class="sum1">
                    Virtualizing the Unvirtualizable
                </summary>
    
                <p>
                    So how was this handled before VT was available?
                    <br />
                    <br />
                    Using techniques like <b>binary translation</b> and
                    <b>protection rings</b>.
                </p>
    
                <figure>
                    <img
                    src="graphics/07-04.jpg"
                    height="210" width="400">
                    <figcaption>
                    Binary translator rewriting the guest OS, which runs in
                    ring 1, while the hypervisor runs in ring 0.
                    The user programs remain in ring 3.
                    </figcaption>
                </figure>

                <p>
                    Sensitive instructions are eliminated by re-writing the
                    guest's kernel code, one <b>basic block</b> at a time.
                    A basic block is a run of consecutive instructions, where
                    the instruction pointer advances a single instruction at a
                    time. Sensitive instructions are replaced with calls to
                    hypervisor procedures.
                    <br />
                    Translated blocks are cached, so that they do not need to
                    be translated again.
                </p>

                <p>
                    Type II hypervisors are little bit different, in
                    that they rely upon the host's device drivers. They are
                    like teenagers hosting a party while their parents are
                    away: they can move everything, so long as it is all back
                    in place when the parents return. This restoration is
                    called a <b>world switch</b>.
                </p>

            </details>

            <details>
                <summary class="sum1">
                    The Cost of Virtualization
                </summary>
    
                <p>
                    Do CPUs with VT outperform software-based approaches?
                    <br />
                    Not necessarily! VT generates lots of traps, and traps are
                    expensive.
                    <br />
                    Sometimes software beats hardware: so sometimes hypervisors
                    translate anyway, even if there is hardware support.
                </p>

                <p>
                    An example where translation is cheaper:
                    <br />
                    Turning off interrupts may be very expensive, if there are
                    deep caches and out-of-order execution.
                    <br />
                    But a hypervisor need not <i>really</i> turn off
                    interrupts: it only needs to make it look to the guest OS
                    <i>as if</i> they are off.
                    So it can just keep a binary flag per guest OS: much
                    cheaper!
                </p>

            </details>


<!--include quizzes/quiz7.4.qhtm -->            
     
     
    </body>
</html>
