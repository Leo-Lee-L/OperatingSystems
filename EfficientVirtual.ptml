<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
             Techniques for Efficient Virtualization
        </title>
    </head>

    <body>
        <h1>
             Techniques for Efficient Virtualization
        </h1>

            <div style="text-align:center">
                <p>
                <img
                src="graphics/07-03.jpg"
                height="210" width="400">
                </p>
            </div>

            <p>
            <br />
            Scenario: a type 1 hypervisor is running a guest OS that thinks it
            is the kernel, but really is in user mode.
            The guest runs in <b>virtual kernel mode</b>. Its
            apps think they are in user mode (and really are).
            <br />
            <br />
            What happens when the guest executes a privileged instruction?
            Normally, this would cause the program to crash. But with VT, the
            instruction traps to the hypervisor, and the hypervisor determines
            if the guest OS (or at least its kernel) 
            called it -- OK! -- or a guest application did -- not OK!
            </p>

            <details>
                <summary id="sum1">
                    Virtualizing the Unvirtualizable
                </summary>
    
                <p>
                    So how was this handled before VT was available?
                    <br />
                    <br />
                    Using techniques like <b>binary translation</b> and
                    <b>protection rings</b>.
                </p>
    
                <figure>
                    <img
                    src="graphics/07-04.jpg"
                    height="210" width="400">
                    <figcaption>
                    Binary translator rewriting the guest OS, which runs in
                    ring 1, while the hypervisor runs in ring 0.
                    The user programs remain in ring 3.
                    </figcaption>
                </figure>

                <p>
                    Sensitive instructions are eliminated by re-writing the
                    guest's kernel code, one <b>basic block</b> at a time.
                    A basic block is a run of consecutive instructions, where
                    the instruction pointer advances a single instruction at a
                    time. Sensitive instructions are replaced with calls to
                    hypervisor procedures.
                    <br />
                    Translated blocks are cached, so that they do not need to
                    be translated again.
                </p>

                <p>
                    Type II hypervisors are little bit different,  in
                    that they rely upon the host's device drivers 
                </p>

            </details>

            <details>
                <summary id="sum1">
                    The Cost of Virtualization
                </summary>
    
                <p>

                </p>
            </details>


<!--include quizzes/quiz7.4.qhtm -->            
     
     
    </body>
</html>
