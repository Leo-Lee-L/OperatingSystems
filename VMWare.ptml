<!DOCTYPE html>
<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
             Case Study: VMware
        </title>
    </head>

    <body>
<!--include menu.txt -->
        <h1>
             Case Study: VMware
        </h1>

            <figure>
                <img src="graphics/vSphere.png">
                <figcaption>
                VMware vSphere (see credits)
                </figcaption>
            </figure>

            <details>
                <summary class="sum1">
                    The Early History of VMware
                </summary>
    
                <ul>
                    <li>
                        Based on work at Stanford in the late 1990s.
                    </li>
                    <li>
                        The founders realized that rather than solving existing
                        problems in large, complex, operating systems, one
                        could innovate in a layer below the OS.
                    </li>
                    <li>
                        <b>1998:</b>
                    </li>
                    <ul>
                        <li>
                            <b>VMware Workstation for Linux</b>
                            <br />
                            Ran on top of Linux.
                        </li>
                        <li>
                            <b>VMware Workstation for Windows</b>
                            <br />
                            Ran on top of Windows.
                        </li>
                    </ul>
                    <li>
                        <b>2001: ESX Server</b>
                        <ul>
                            <li>
                                Aimed at the server consolidation market.
                            </li>
                            <li>
                                Prior practice: buy a server for each email,
                                web, DB server application.
                            </li>
                            <li>
                                Machines were often at 10% capacity!
                            </li>
                        </ul>
                    </li>
                    <li>
                        <b>2002: Virtual Center / vSphere</b>:
                        <br />
                        Manage 1000s of virtual machines from one application.
                    </li>
                    <li>
                        <b>VMotion</b>:
                        <br />
                        Live migrate servers.
                    </li>
                    <figure>
                        <iframe width="560" height="315"
                            src="https://www.youtube.com/embed/9f5GFB0m_E4"
                            frameborder="0" allowfullscreen>
                        </iframe>
                        <figcaption>
                            Live migrating a server from Raleigh to Amsterdam.
                        </figcaption>
                    </figure>
                </ul>

            </details>

            <details>
                <summary class="sum1">
                    VMware Workstation
                </summary>
   
                <ul>
                    <li>
                        The first virtualization product for 32-bit x86.
                    </li>
                    <li>
                        The "WinTel" platform was very different from
                        vertically integrated mainframes:
                        <ol type="a">
                            <li>
                                Intel and AMD build the chips.
                            </li>
                            <li>
                                Microsoft (Windows) and open source (Linux)
                                provide the OS.
                            </li>
                            <li>
                                A third group of companies build peripherals.
                            </li>
                            <li>
                                A fourth group of integrators (Dell, HP) build
                                systems for retail sale.
                            </li>
                        </ol>
                    </li>
                    <li>
                        What's more, there was no hardware support for
                        virtualization.
                    </li>
                    <li>
                        So VMware had to use existing techniques of
                        virtualization, borrow techniques from other areas, and
                        invent some.
                    </li>
                </ul>

                <details>
                    <summary class="sum2">
                        Video: What Is VMware Workstation?
                    </summary>
                    <figure>
                        <iframe width="560" height="315"
                            src="https://www.youtube.com/embed/_GVZHuHHdnk"
                            frameborder="0" allowfullscreen>
                        </iframe>
                        <figcaption>
                            A video on VMware Workstation
                        </figcaption>
                    </figure>
                </details>

                <p>
                <a href="https://en.wikipedia.org/wiki/VMware_Workstation">
                    More on VMware Workstation
                </a>
                </p>

            </details>

            <details>
                <summary class="sum1">
                    Challenges in Bringing Virtualization to the x86
                </summary>
    
                <p>
                    Hypervisors <b>add a level of indirection</b> to the domain
                    of computer hardware. They provide the abstraction of a
                    <b>virtual machine</b>: each one thinks if is "king of the
                    hill," and has a whole machine to itself. Ideally, the VMs
                    should be just like the emulated machine, as fast as the
                    emulated machine, and completely isolated from each other.
                    <br />
                    VMware had these goals (general to most virtualization):
                </p>

                <ol>
                    <li>
                        <b>Compatibility:</b>
                        <br />
                        Any x86 OS, and all of its applications, should be able
                        to run on without modifications on the VM.
                    </li>
                    <li>
                        <b>Performance:</b>
                        <br />
                        The overhead of the hypervisor had to be low enough the
                        users could use a VM as their primary machine.
                        <br />
                        Ideally, things run as fast as on a native OS, but at
                        least as fast as the previous chip generation.
                    </li>
                    <li>
                        <b>Isolation:</b>
                        <br />
                        The hypervisor had to ensure complete isolation of each
                        VM, i.e., be completely in charge of the real physical
                        resources. A VM might be infected with malicious code:
                        this will not impact any other VM.
                    </li>
                </ol>

                <p>
                    There was tension between the requirements. E.g., total
                    compatibility might need to be sacrificed for performance.
                    But the designers held isolation as paramount.
                    <br />
                    The primary challenges were:
                </p>

                <ol>
                    <li>
                        <b>The x86 architecture did not support virtualization.</b>
                        <br />
                        (<a
                            href="https://en.wikipedia.org/wiki/Popek_and_Goldberg_virtualization_requirements">
                            Popek and Goldberg requirements for virtualization
                        </a>)
                        <br />
                        Example: POPF (pop flags) would fail silently 
                        in user mode.
                    </li>
                    <li>
                        <b>The x86 architecture was of daunting complexity.</b>
                        <br />
                        Decades of "cruft" built up due to backwards
                        compatibility goal. Four modes: real, protected, v8086,
                        and 
                        <a
                            href="https://en.wikipedia.org/wiki/System_Management_Mode">
                            system management</a>.
                        <br />
                        <a
                            href="https://en.wikipedia.org/wiki/X86#Operating_modes">
                            x86 operating modes.
                        </a>
                    </li>
                    <li>
                        <b>x86 machines had diverse peripherals.</b>
                        <br />
                    </li>
                    <li>
                        <b>The need for a simple user experience.</b>
                        <br />
                        The users would be doing the installs themselves, not
                        (e.g.) an IBM technician.
                    </li>
                </ol>

            </details>

            <details>
                <summary class="sum1">
                    VMware Workstation: Solution Overview
                </summary>
    
                <details>
                    <summary class="sum2">
                        Virtualizing the x86 Architecture
                    </summary>

                    <ul>
                        <li>
                            <b>VMM</b>
                            (Virtual Machine Monitor):
                            runs the actual virtual machine.
                        </li>
                        <li>
                            <b>VMX:</b> interacts with host OS.
                        </li>
                    </ul>

                    <p>
                        Possible approaches:
                    </p>

                    <figure>
                        <iframe width="560" height="315"
                            src="https://www.youtube.com/embed/CLR0pq9dy4g"
                            frameborder="0" allowfullscreen>
                        </iframe>
                        <figcaption>
                            Trap-and-emulate
                        </figcaption>
                    </figure>

                    <ul>
                        <li>
                            Rely on hardware support for virtualization to
                            <b>trap-and-emulte</b> 
                            <a
                                href="http://www.brokenthorn.com/Resources/OSDev23.html">
                                privileged instructions</a>.
                            <br />
                            Not available on x86 until 2005.
                            <br />
                            <a
                                href="https://en.wikipedia.org/wiki/Trap_(computing)">
                                Trap
                            </a>
                        </li>
                        <li>
                            <b>Dynamic binary translation</b>: the VMM emulates
                            all instructions.
                            <br />
                            Problem: too slow for most uses. (5x)
                        </li>
                    </ul>

                    <p>
                        The solution:
                    </p>

                    <ul>
                        <li>
                            Trap-and-emulate <i>can</i> be used when user
                            programs are running.
                        </li>
                        <li>
                            In other cases, resort to binary translation.
                        </li>
                        <li>
                            Run an algorithm to decide which to do.
                            <br />
                            This <i>doesn't</i> need to examine code, just
                            registers!
                        </li>
                    </ul>

                    <p>
                    <br />
                        Binary translation must be used if:
                    </p>

                    <ol>
                        <li>
                            The virtual machine is running in kernel mode (ring
                            0).
                        </li>
                        <li>
                            The virtual machine can disable interrupts and
                            issue I/O instructions.
                        </li>
                        <li>
                            The virtual machine is running in real mode, a
                            legacy 16-bit mode used by BIOS.
                        </li>
                    </ol>
        
                    <p>
                        VMware can speed up binary translation to near-native
                        speeds because it sets the hardware to run the code
                        instead of translating it in software.
                        <br />
                        Runs at 80% of native speed, instead of 20%.
                    </p>

                    <figure>
                        <img src="graphics/07-08.png"
                            width="440"
                            height="210">
                        <figcaption>
                        High-level components of the VMware virtual machine
                        monitor.
                        </figcaption>
                    </figure>
                </details>
    
                <details>
                    <summary class="sum2">
                        A Guest Operating System Centric Strategy
                    </summary>
        
                    <ul>
                        <li>
                            Ideally, we want the hypervisor to emulate the
                            hardware so successfully that <i>any</i> OS that
                            runs on that hardware will run on the hypervisor.
                        </li>
                        <li>
                            With the x86 family, this was not possible: no
                            hardware support for virtualization, too complex.
                        </li>
                        <li>
                            So the VMware engineers focused on just a few, like
                            Linux, Windows 3.1, 95/98 and NT.
                            (But Minix ran as well, by accident.)
                        </li>
                        <li>
                            Only OS/2 ever used x86 rings 1 and 2, so VMware
                            would just shut down the VM if it tried to enter
                            those rings.
                        </li>
                    </ul>

                </details>
    
                <details>
                    <summary class="sum2">
                        The Virtual Hardware Platform
                    </summary>
        
                    <p>
                        Two layers:
                    </p>

                    <ul>
                        <li>
                            Software model that "looks like" the 
                            device to the guest OS.
                        </li>
                        <li>
                            A back-end that communicates with the host OS.
                        </li>
                    </ul>

                    <p>
                        <b>Example:</b> the "Lance" 10-Mbps ethernet card.
                        VMware "supported" this card long after the real thing
                        was off the market, and eventually could run 10x
                        faster.
                        <br />
                        The actual hardware did not have to be what the guest
                        OS thought was there! It just talked to the VMware
                        drivers, and they could be coupled with different
                        back-ends.
                    </p>

                    <figure>
                        <img src="graphics/07-09.png">
                        <figcaption>
                        Virtual hardware configuration of VMware
                        workstation in 2000.
                        </figcaption>
                    </figure>
                </details>
    
                <details>
                    <summary class="sum2">
                        The Role of the Host Operating System
                    </summary>
        
                    <ul>
                        <li>
                            By creating a type 2 hypervisor, VMware could be
                            installed like a normal program.
                        </li>
                        <li>
                            It could use the host's drivers to handle the
                            problem of multiple peripherals.
                        </li>
                    <ul>
                    </ul>
                        <li>
                            But VMware needed to do fancy things an ordinary
                            application could not.
                        </li>
                        <li>
                            And many of those things an ordinary kernel-level
                            device driver shouldn't do either.
                        </li>
                    </ul>

                    <p>
                        <b>So</b>, create three components:
                    </p>

                    <ol>
                        <li>
                            <b>VMX:</b> a user-space program the user interacts
                            with: one per VM.
                        </li>
                        <li>
                            <b>VMX driver:</b> A small kernel-mode device
                            driver that can suspend the host OS for the...
                        </li>
                        <li>
                            <b>VMM:</b> multiplexes the CPU and memory;
                            contains trap-and-emulate, device drivers, shadow
                            paging module, binary translator.
                            <br />
                            Runs in kernel mode, but not "in" the host OS.
                        </li>
                    </ol>

                    <figure>
                        <img src="graphics/07-10.png"
                            width="440"
                            height="250">
                        <figcaption>
                        The VMware Hosted Architecture
                        </figcaption>
                    </figure>

                    <p>
                        VMX runs as an OS process. But the VMM is a peer. The
                        VMX suspends the host OS and gives the VMM full control
                        of the machine. This is a <b>world switch</b>.
                        <br />
                        The VMM and the host OS have entirely 
                        different address spaces.
                        <br />
                        Although earlier described as very time consuming, here
                        the book says the world switch only takes 45
                        instructions!
                    </p>

                    <figure>
                        <img src="graphics/07-11.png"
                            width="440"
                            height="192">
                        <figcaption>
                        The difference between a normal context switch and a
                        world switch.
                        </figcaption>
                    </figure>
                </details>
            </details>

            <details>
                <summary class="sum1">
                    The Evolution of the VMware Workstation
                </summary>
    
                <p>
                    The VMM / hhost OS architecture remains the same.
                    <br />
                    But today, VMware Workstation can rely on:
                </p>

                <ol>
                    <li>
                        Trap-and-emulate all the time
                    </li>
                    <li>
                        Nested hardware page tables instead of the shadow page
                        table
                    </li>
                </ol>

                <figure>
                    <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/lD_y5wTjRqs"
                        frameborder="0" allowfullscreen>
                    </iframe>
                    <figcaption>
                        Using VMware Workstation
                    </figcaption>
                </figure>
            </details>

            <details>
                <summary class="sum1">
                    ESX Server: VMware's type 1 Hypervisor
                </summary>

                <p>
                Not having a host OS to rely upon means ESX has more work to do
                than VMware Workstation. But in a situation where IT
                organizations are trying to run 1000s of virtual machines, a
                type 1 hypervisor makes sense: it will run significantly
                faster.
                </p>

                <figure>
                        <img src="graphics/07-12.png"
                            width="440"
                            height="182">
                        <figcaption>
                        ESX Server
                        </figcaption>
                </figure>

                <ol>
                    <li>
                        The CPU scheduler ensures that each virtual machine
                        gets a fair share of the CPU: no starvation.
                    </li>
                    <li>
                        Scalability: VMs run efficiently even when they
                        need more memory than is actually available.
                        <br />
                        <a
                            href="http://www.vfrank.org/2013/09/18/understanding-vmware-ballooning/">
                            <b>Ballooning</b></a>
                        and <a
                            href="https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1021095">
                            <b>transparent page sharing</b></a>
                            introduced.
                    </li>
                    <li>
                        An optimized I/O subsystem: device drivers run
                        directly within the ESX hypervisor, with no world
                        switch required.
                    </li>
                    <li>
                        ESX uses a file system (VMFS) optimized to store
                        virtual machine images. A single ESX Server can
                        issue over 1 million disk operations per second.
                    </li>
                    <li>
                        The workstations were aimed at developers: one
                        could experiment with new OS releases inside a VM.
                    </li>
                    <li>
                        ESX Server made it easy to implement new
                        capabilities.
                    </li>
                    <li>
                        <b>VMotion:</b>
                        live migrate a VM from one box running
                        ESX Server to another. This required the
                        coordination of the memory manager, the CPU
                        scheduler, and the networking stack.
                    </li>
                </ol>
            </details>

            <details>
                <summary class="sum1">
                    Video on Building a VMware Home Lab
                </summary>
                <figure>
                    <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/Hm7kQHI4YnM"
                        frameborder="0" allowfullscreen></iframe>
                    <figcaption>
                    VMware home lab
                    </figcaption>
                </figure>
            </details>

<!--include quizzes/quiz7.12.qhtm -->

            <details>
                <summary class="sum1">
                    Credits
                </summary>
                "VMware in the cloud" graphic by Hany R. Michael.
            </details>

        
    </body>
</html>
